substitutions:
  # Phases of the Voice Assistant
  # IDLE: The voice assistant is ready to be triggered by a wake-word
  voice_assist_idle_phase_id: '1'
  # LISTENING: The voice assistant is ready to listen to a voice command (after being triggered by the wake word)
  voice_assist_listening_phase_id: '2'
  # THINKING: The voice assistant is currently processing the command
  voice_assist_thinking_phase_id: '3'
  # REPLYING: The voice assistant is replying to the command
  voice_assist_replying_phase_id: '4'
  # NOT_READY: The voice assistant is not ready 
  voice_assist_not_ready_phase_id: '10'
  # ERROR: The voice assistant encountered an error
  voice_assist_error_phase_id: '11' 

esphome:
  name: esp32va01
  friendly_name: esp32va01

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y"

      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"

      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y" 

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "~~~~~~~~~~~~~~~~~~~~~~~="

ota:
  - platform: esphome
    password: "~~~~~~~~~~~~~~~~~~~~~~~~"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

psram:
  mode: octal
  speed: 80MHz

globals:
  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: is_tts_active
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: is_beep_active
    type: bool
    restore_value: no
    initial_value: 'false'

i2s_audio:
  - id: i2s
    i2s_lrclk_pin: GPIO05
    i2s_bclk_pin: GPIO06
  - id: i2s_in
    i2s_lrclk_pin: GPIO08  #WS 
    i2s_bclk_pin: GPIO09 #SCK
microphone:
  - platform: i2s_audio
    id: mic_id
    adc_type: external
    i2s_din_pin: GPIO04 #SD
    channel: left
    i2s_audio_id: i2s_in
speaker:
  - platform: i2s_audio
    id: speaker_id
    i2s_audio_id: i2s
    dac_type: external
    i2s_dout_pin:   
      number: GPIO07 #DIN Pin of the MAX98357A Audio Amplifier
    sample_rate: 48000
  - platform: mixer
    id: mixer_speaker_id
    output_speaker: speaker_id
    source_speakers:
      - id: announcement_spk_mixer_input
      - id: media_spk_mixer_input
  - platform: resampler
    id: media_spk_resampling_input
    output_speaker: media_spk_mixer_input
  - platform: resampler
    id: announcement_spk_resampling_input
    output_speaker: announcement_spk_mixer_input
media_player:
  - platform: speaker
    name: None
    id: speaker_media_player_id
    media_pipeline:
        speaker: media_spk_resampling_input
        num_channels: 1
    announcement_pipeline:
        speaker: announcement_spk_resampling_input
        num_channels: 1
    files:
      - id: alarm_sound
        file: alarm.flac # Placed in the yaml directory. Should be encoded with a 48000 Hz sample rate, mono or stereo audio, and 16 bits per sample.
      - id: beep
        file: r2d2d.flac
    on_play:
      - if:
          condition:
            - switch.is_off: timer_ringing
          then:
            - micro_wake_word.stop:

    on_announcement:
      - if:
          condition:
            and:
              - microphone.is_capturing: 
              - switch.is_off: timer_ringing
          then:
            - micro_wake_word.stop:
    on_idle:
      - if:
          condition:
            - switch.is_off: timer_ringing
          then:
            - wait_until:
                and:
                  - media_player.is_idle:
                  - speaker.is_stopped:
                      id: speaker_id
            - if:
                condition:
                  - lambda: 'return id(is_beep_active) == false;'
                then:
                  - voice_assistant.stop:
                  - if:
                      condition:
                        lambda: 'return id(is_tts_active);'
                      then:
                        - voice_assistant.start:
                      else:
                        - if:
                            condition:
                              switch.is_on: ww_switch
                            then:
                              - delay: 150ms
                              - micro_wake_word.start:
                else:
                  - lambda: |-
                      id(is_beep_active) = false;
binary_sensor:
  - platform: gpio
    id: center_button
    pin:
      number: GPIO13
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 20ms
    on_click:
      then:
        - switch.toggle: ww_switch

switch:
  - platform: gpio
    pin: GPIO10
    id: wake_led
    name: "Rec"
  - platform: gpio
    id: ww_switch
    name: "WakeWord"
    pin:
      number: GPIO02
      inverted: true
    restore_mode: ALWAYS_ON
    on_turn_on:
    - micro_wake_word.start:
    on_turn_off:
    - micro_wake_word.stop:
  - platform: template
    name: "Ring Timer"
    id: timer_ringing
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
        # Stop playing the alarm
        - media_player.stop:
            announcement: true
        - mixer_speaker.apply_ducking:  # Stop ducking the media stream over 2 seconds
            id: media_spk_mixer_input
            decibel_reduction: 0
            duration: 2.0s
    on_turn_on:
        # - micro_wake_word.stop:
        # Duck media audio by 20 decibels instantly
        - mixer_speaker.apply_ducking:
            id: media_spk_mixer_input
            decibel_reduction: 20
            duration: 0.0s
        - while:
            condition:
                switch.is_on: timer_ringing
            then:
                # Play the alarm sound as an announcement
                - media_player.speaker.play_on_device_media_file:
                    media_file: alarm_sound
                    announcement: true
                # Wait until the alarm sound starts playing
                - wait_until:
                    media_player.is_announcing:
                # Wait until the alarm sound stops playing
                - wait_until:
                    not:
                      media_player.is_announcing:
                - delay: 1000ms
button:
  - platform: restart
    name: wow
  - platform: template
    name: "VA stop"
    on_press:
      then:
        - voice_assistant.stop:
  - platform: template
    name: "VA start"
    on_press:
      then:
        - voice_assistant.start:

script:
  - id: listening_timeout
    mode: restart 
    then:
      - delay: 3s
      - if:
          condition:
            lambda: |-
              return id(voice_assistant_phase) == 2;
          then:
            - switch.turn_off: wake_led
            - voice_assistant.stop:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};

micro_wake_word:
  models:
    - model: https://github.com/kahrendt/microWakeWord/releases/download/okay_nabu_20241226.3/okay_nabu.json
  vad:
    model: https://github.com/kahrendt/microWakeWord/releases/download/v2.1_models/vad.json
  on_wake_word_detected:
    - if:
        condition:
          switch.is_on: timer_ringing
        then:
          - switch.turn_off: timer_ringing
          - delay: 1s
          - micro_wake_word.start:
        else:
          - if:
              condition:
                switch.is_on: ww_switch
              then:
                - lambda: |-
                    id(is_beep_active) = true;
                - media_player.speaker.play_on_device_media_file:
                    media_file: beep

                - delay: 300ms
                - voice_assistant.start:
                    wake_word: !lambda return wake_word;
              else:
                - micro_wake_word.stop:
                - delay: 400ms
                - micro_wake_word.start:
voice_assistant:
  id: va
  microphone: mic_id
  media_player: speaker_media_player_id
  noise_suppression_level: 2.0
  volume_multiplier: 2.0
  auto_gain: 31dBFS
  conversation_timeout: 120s
  on_client_connected:
        then:
          - delay: 50ms
          - micro_wake_word.start:
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
  on_client_disconnected:
        then:
          - voice_assistant.stop:
          - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
  on_listening:
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
        id(is_tts_active) = false;
    - switch.turn_on: wake_led
    - script.execute: listening_timeout
  on_stt_vad_start:
    - script.stop: listening_timeout
  on_stt_vad_end:
    then:
      - switch.turn_off: wake_led
      - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id}; 
  on_tts_start: 
    - lambda: |-
        id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
  on_tts_end: 
    - lambda: |-
        id(is_tts_active) = true;
  on_error:
    - micro_wake_word.start:
  on_timer_finished:
    then:
      - switch.turn_on: timer_ringing
  on_end:
    - delay: 500ms
    - wait_until:
        and:
          - media_player.is_idle:
          - speaker.is_stopped:
              id: speaker_id
    - if:
        condition:
          lambda: 'return id(is_tts_active) == false;'
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          - if:
              condition:
                switch.is_on: ww_switch
              then:
                - delay: 300ms
                - micro_wake_word.start:
